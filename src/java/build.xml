<?xml version="1.0" encoding="UTF-8"?>
<project name="bplusloader" default="run" basedir=".">
	<property name="src" location="src"/> <!-- java source folder -->
	<property name="build" location="build"/> <!-- intermediate build products -->
	<property name="jars" location="build/jars"/> <!-- jar files -->
	<property name="dist" location="build/dist"/> <!-- build product location -->
	<property name="assets" location="build/assets"/> <!-- build product location -->
	<property name="prod_keystore"
			  location="${user.home}/.prodJavaCerts/java.ks" /> <!-- production code signing key for java -->
    <property name="test.html.file" location="test/applet_install.html"/>

    <!-- Our products.  Signed and unsigned JAR, and html -->
    <property name="jarfile" location="${jars}/${ant.project.name}.jar"/>
    <property name="signed.jarfile" location="${jars}/${ant.project.name}_signed.jar"/>

    <property name="compile.debug" value="true"/>

	<!-- Initialization target, for any prelimary setup needed to build -->
	<target name="init" description="Preparation">
		<mkdir dir="${build}"/>
		<mkdir dir="${jars}"/>
	</target>

	<!-- Maximize compatibility in the browser by making the classfiles Java 1.3 compatible. -->
    <target name="compile" depends="init" description="Compile code">
        <javac srcdir="${src}" destdir="${build}"
            source="1.3" target="1.2"
            includeAntRuntime="no"
            debug="${compile.debug}">
        </javac>
    </target>
    
    <target name="build-jar" depends="compile" description="Build jar">
        <mkdir dir="${dist}"/>
        <jar jarfile="${jarfile}"
            basedir="${build}">
        </jar>
    </target>

	<!-- See if we already have a private key for this user in ~/.keystore.  -->
    <!-- Note: This tests for an output string of "does not exist", this
               assumes the locale is set to English and will not work for
               Spanish or other languages. -->
	<target name="checkforkey" depends="build-jar" description="Generate private key">
		<exec executable="keytool" resultproperty="keytool.result" failonerror="false">
			<redirector outputproperty="keytool.output" logError="false"/>
			<arg value="-list"/>
			<arg value="-alias"/>
			<arg value="${user.name}"/>
			<arg value="-storepass"/>
			<arg value="browserplus"/>
		</exec>
		<!-- Set the property createPrivateKey, used in genkey below, if there is no key -->
		<condition property="createPrivateKey">
			<not>
				<equals arg1="${keytool.result}" arg2="0"/>
			</not>
		</condition>
	</target>

	<!-- If createPrivateKey is set we need to call genkey.  -->
	<target name="genkey" depends="checkforkey" if="createPrivateKey">
		<echo message="Creating a new key because keytool returned: ${keytool.output}"/>
		<genkey alias="${user.name}" storepass="browserplus" >
			<dname>
				<param name="CN" value="${user.name}"/>
				<param name="OU" value="BrowserPlus"/>
				<param name="O"  value="Yahoo!"/>
				<param name="C"  value="US"/>
		  	</dname>
		</genkey>
	</target>
	
	<!-- Sign the JAR with the key generated above. -->
	<target name="devel-sign-jar" depends="genkey" description="Sign JAR file">

        <delete file="${signed.jarfile}" />

        <signjar jar="${jarfile}"
            alias="${user.name}"
            storepass="browserplus"
			keystore="${user.home}/.keystore"
            signedjar="${signed.jarfile}"/>
    </target>

	<target name="prod-sign-jar" depends="build-jar" description="Sign JAR file">
        <input message="Enter password for production Java code signing key: "
               addproperty="prod.signpass" />

        <delete file="${signed.jarfile}" />

        <signjar jar="${jarfile}"
            alias="mykey"
            storepass="${prod.signpass}"
			keystore="${prod_keystore}"
            signedjar="${signed.jarfile}"
            verbose="true" />
    </target>

    <target name="build_devel" depends="devel-sign-jar"
            description="Build a development signed Jar file">
		<mkdir dir="${dist}"/>
		<!-- Copy jar -->
		<copy toDir="${dist}">
			<fileset dir="${jars}">
				<include name="*_signed.jar"/>
			</fileset>			
		</copy>
		<copy toDir="${assets}">
			<fileset dir="${jars}">
				<include name="*_signed.jar"/>
			</fileset>			
		</copy>
    </target>

    <target name="build_prod" depends="prod-sign-jar"
            description="Build a production signed jar file">
		<mkdir dir="${dist}"/>
		<!-- Copy jar -->
		<copy toDir="${dist}">
			<fileset dir="${jars}">
				<include name="*_signed.jar"/>
			</fileset>			
		</copy>
		<copy toDir="${assets}">
			<fileset dir="${jars}">
				<include name="*_signed.jar"/>
			</fileset>			
		</copy>
    </target>

    <target name="run" depends="build_devel" description="Run applet in preferred browser">
        <!-- Use the exec task to open the HTML file -->
        <exec dir="${dist}" executable="/usr/bin/open" os="Mac OS X">
            <arg value="${test.html.file}"/>
        </exec>
    </target>

    <target name="clean" description="Remove build and dist directories">
        <delete dir="${build}"/>
        <delete dir="${jars}"/>
        <delete dir="${dist}"/>
    </target>
</project>
